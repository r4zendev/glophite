
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Graphite 0
#define LAYER_QWERTY 1
#define LAYER_Symbol 2
#define LAYER_Number 3
#define LAYER_Cursor 4
#define LAYER_Function 5
#define LAYER_Mouse 6
#define LAYER_System 7
#define LAYER_Gaming 8
#define LAYER_Magic 9

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

    /* Custom Defined Behaviors */
/ {
    #ifndef OPERATING_SYSTEM
//#define OPERATING_SYSTEM 1 // linux
#define OPERATING_SYSTEM 2 // macos
//#define OPERATING_SYSTEM 3 // windows
#endif
#if OPERATING_SYSTEM == 2
    #define _C      LG
    #define _REDO   _C(LS(Z))
    #define _POWER  K_POWER
    #define _W      LA
    #define _HOME   _C(LEFT)
    #define _END    _C(RIGHT)
    #define SPC_P   LC(LEFT)
    #define SPC_N   LC(RIGHT)
    #define TAB_P   _C(LS(LBKT))
    #define TAB_N   _C(LS(RBKT))
#else
    #define _C      LC
    #define _REDO   _C(Y)
    #define _POWER  C_POWER
    #define _W      _C
    #define _HOME   HOME
    #define _END    END
#endif
#define _SLEEP      C_SLEEP
#if OPERATING_SYSTEM == 3
    #define _LOCK   LG(L)
#elif OPERATING_SYSTEM == 2
    #define _LOCK   _C(LC(Q))
#elif OPERATING_SYSTEM == 1
    #define _LOCK   K_LOCK
#endif
#define _UNDO       _C(Z)
#define _CUT        _C(X)
#define _COPY       _C(C)
#define _PASTE      _C(V)
#define _FIND       _C(F)
#define _FIND_NEXT  _C(G)
#define _FIND_PREV  _C(LS(G))

//
// Glove80 specific symbol overrides to support non "en-US" locales
//
#undef  AMPS
#define AMPS  LS(N7)
#undef  AT
#define AT    LS(N2)
#undef  CARET
#define CARET LS(N6)
#undef  COLON
#define COLON LS(SEMI)
#undef  DLLR
#define DLLR  LS(N4)
#undef  DQT
#define DQT   LS(SQT)
#undef  EXCL
#define EXCL  LS(N1)
#undef  GT
#define GT    LS(DOT)
#undef  HASH
#define HASH  LS(N3)
#undef  LBRC
#define LBRC  LS(LBKT)
#undef  LPAR
#define LPAR  LS(N9)
#undef  LT
#define LT    LS(COMMA)
#undef  PIPE
#define PIPE  LS(BSLH)
#undef  PLUS
#define PLUS  LS(EQUAL)
#undef  PRCNT
#define PRCNT LS(N5)
#undef  QMARK
#define QMARK LS(FSLH)
#undef  RBRC
#define RBRC  LS(RBKT)
#undef  RPAR
#define RPAR  LS(N0)
#undef  STAR
#define STAR  LS(N8)
#undef  TILDE
#define TILDE LS(GRAVE)
#undef  UNDER
#define UNDER LS(MINUS)

behaviors {
  w_caps: capsword_and_capslock {
      compatible = "zmk,behavior-hold-tap";
      label = "CAPSWORD_AND_CAPSLOCK";
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      #binding-cells = <2>;
      bindings = <&kp>, <&caps_word>;
  };

  quote_under: quote_and_underscore {
      compatible = "zmk,behavior-mod-morph";
      label = "QUOTE_AND_UNDERSCORE";
      #binding-cells = <0>;
      bindings = <&kp SQT>, <&kp UNDER>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  hyphen_qmark: hyphen_and_question {
      compatible = "zmk,behavior-mod-morph";
      label = "HYPHEN_AND_QUESTION";
      #binding-cells = <0>;
      bindings = <&kp MINUS>, <&kp QMARK>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  comma_semi: comma_and_semicolon {
      compatible = "zmk,behavior-mod-morph";
      label = "COMMA_AND_SEMICOLON";
      #binding-cells = <0>;
      bindings = <&kp COMMA>, <&kp SEMI>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  dot_colon: dot_and_colon {
      compatible = "zmk,behavior-mod-morph";
      label = "DOT_AND_COLON";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp COLON>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  fslh_bslh: fslh_and_bslh {
      compatible = "zmk,behavior-mod-morph";
      label = "FSLH_AND_BSLH";
      #binding-cells = <0>;
      bindings = <&kp FSLH>, <&kp BSLH>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  //////////////////////////////////////////////////////////////////////////
  //
  // ZMK global overrides
  //
  //////////////////////////////////////////////////////////////////////////

  //
  // CapsWord - ported from Pascal Getreuer's extension for QMK
  // - https://zmk.dev/docs/behaviors/caps-word
  // - https://getreuer.info/posts/keyboards/caps-word/index.html
  //
  behavior_caps_word {
      continue-list = <
          UNDERSCORE MINUS
          BACKSPACE DELETE
          N1 N2 N3 N4 N5 N6 N7 N8 N9 N0
      >;
  };
};

macros {
    //////////////////////////////////////////////////////////////////////////
    //
    // Approximation of Pascal Getreuer's Select Word macro from QMK
    // - https://getreuer.info/posts/keyboards/select-word/index.html
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // SELECT_WORD_DELAY defines how long the macro waits (milliseconds)
    // after moving the cursor before it selects a word.  A larger delay
    // may allow the macro to move to the next word upon each invocation.
    //
    #ifndef SELECT_WORD_DELAY
    #define SELECT_WORD_DELAY 1
    #endif

    ZMK_MACRO(select_none,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
    )

    //
    // select a word (jumps to next word upon each successive invocation)
    //
    select_word: select_word {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&select_word_right>, <&select_word_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ZMK_MACRO(select_word_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _W(RIGHT) &kp _W(LEFT) &kp _W(LS(RIGHT))>;
    )
    ZMK_MACRO(select_word_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _W(LEFT) &kp _W(RIGHT) &kp _W(LS(LEFT))>;
    )

    //
    // extend current selection by one word
    //
    extend_word: extend_word {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&extend_word_right>, <&extend_word_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ZMK_MACRO(extend_word_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _W(LS(RIGHT))>;
    )
    ZMK_MACRO(extend_word_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _W(LS(LEFT))>;
    )

    //
    // select current line
    //
    select_line: select_line {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&select_line_right>, <&select_line_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ZMK_MACRO(select_line_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _HOME &kp LS(_END)>;
    )
    ZMK_MACRO(select_line_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _END &kp LS(_HOME)>;
    )

    //
    // extend current selection by one line
    //
    extend_line: extend_line {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&extend_line_right>, <&extend_line_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ZMK_MACRO(extend_line_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LS(DOWN) &kp LS(_END)>;
    )
    ZMK_MACRO(extend_line_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LS(UP) &kp LS(_HOME)>;
    )
};

//////////////////////////////////////////////////////////////////////////
//
// Mouse keys (control mouse via keyboard) -- requires PR23 beta firmware:
// select "community.pr23.mouse-keys" from the drop-down menu located at
// Glove80 Layout Editor > Settings > Advanced Settings > Firmware Version
//
// - https://github.com/moergo-sc/zmk/pull/23
// - https://gist.github.com/krissen/dd27082e7ab0575619c7a31f4d2ec7ae
// - https://github.com/zmkfirmware/zmk/compare/main...urob:zmk:mouse-3.2
//
//////////////////////////////////////////////////////////////////////////

//
// MOUSE_MOTION_DELAY defines how long to wait (milliseconds) before starting
// to move the mouse pointer.
//
#ifndef MOUSE_MOTION_DELAY
#define MOUSE_MOTION_DELAY 0
#endif

//
// MOUSE_MOTION_ACCELERATION_EXPONENT sets how the mouse pointer accelerates:
//
// acceleration exponent 0: uniform speed
// acceleration exponent 1: uniform acceleration
// acceleration exponent 2: uniform jerk
//
#ifndef MOUSE_MOTION_ACCELERATION_EXPONENT
#define MOUSE_MOTION_ACCELERATION_EXPONENT 1
#endif

//
// MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED defines how long to wait (milliseconds)
// before the mouse pointer speed is suddenly boosted to the maximum value.
//
#ifndef MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED
#define MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED 300
#endif

//
// MOUSE_MOTION_MAXIMUM_SPEED defines how quickly the mouse pointer can move.
//
#ifndef MOUSE_MOTION_MAXIMUM_SPEED
#define MOUSE_MOTION_MAXIMUM_SPEED 600
#endif

//
// MOUSE_SCROLL_DELAY defines how long to wait (milliseconds) before starting
// to move the mouse pointer.
//
#ifndef MOUSE_SCROLL_DELAY
#define MOUSE_SCROLL_DELAY 0
#endif

//
// MOUSE_SCROLL_ACCELERATION_EXPONENT sets how the mouse pointer accelerates:
//
// acceleration exponent 0: uniform speed
// acceleration exponent 1: uniform acceleration
// acceleration exponent 2: uniform jerk
//
#ifndef MOUSE_SCROLL_ACCELERATION_EXPONENT
#define MOUSE_SCROLL_ACCELERATION_EXPONENT 0
#endif

//
// MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED defines how long to wait (milliseconds)
// before the mouse pointer speed is suddenly boosted to the maximum value.
//
#ifndef MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED
#define MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED 300
#endif

//
// MOUSE_SCROLL_MAXIMUM_SPEED defines how quickly the mouse wheel can scroll.
//
#ifndef MOUSE_SCROLL_MAXIMUM_SPEED
#define MOUSE_SCROLL_MAXIMUM_SPEED 10
#endif

/*HACK*/};
// ==== MOUSE-KEY <section begins> ====
#define ZMK_MOUSE_DEFAULT_MOVE_VAL MOUSE_MOTION_MAXIMUM_SPEED
#define ZMK_MOUSE_DEFAULT_SCRL_VAL MOUSE_SCROLL_MAXIMUM_SPEED
#include <dt-bindings/zmk/mouse.h>
&mmv {
  delay-ms = <MOUSE_MOTION_DELAY>;
  acceleration-exponent = <MOUSE_MOTION_ACCELERATION_EXPONENT>;
  time-to-max-speed-ms = <MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED>;
};
&msc {
  delay-ms = <MOUSE_SCROLL_DELAY>;
  acceleration-exponent = <MOUSE_SCROLL_ACCELERATION_EXPONENT>;
  time-to-max-speed-ms = <MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED>;
};
// ==== MOUSE-KEY <section ends> =====
/*HACK*//{
};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Graphite {
            bindings = <
               &kp F1    &kp F2   &kp F3    &kp F4     &kp F5                                                                                   &kp F6        &kp F7         &kp F8       &kp F9               &kp F10
            &kp EQUAL    &kp N1   &kp N2    &kp N3     &kp N4  &kp N5                                                                 &kp N6    &kp N7        &kp N8         &kp N9       &kp N0             &kp MINUS
            &kp GRAVE     &kp B    &kp L     &kp D      &kp W   &kp Z                                                                  &kp J     &kp F         &kp O          &kp U  &comma_semi            &fslh_bslh
            &kp LCTRL     &kp N    &kp R     &kp T      &kp S   &kp G                                                                  &kp Y     &kp H         &kp A          &kp E        &kp I              &kp LALT
              &kp F13     &kp X    &kp Q     &kp M      &kp C   &kp V  &lt 3 ESC      &mo 4   &kp DEL    &mo 7      &mo 6  &lt 5 RET   &kp K     &kp R  &quote_under  &hyphen_qmark   &dot_colon               &kp F14
 &magic LAYER_Magic 0  &kp HOME  &kp END  &kp LEFT  &kp RIGHT           &kp BSPC  &kp LSHFT  &kp LGUI  &kp TAB  &kp SPACE      &mo 2          &kp DOWN        &kp UP      &kp PG_DN    &kp PG_UP  &magic LAYER_Magic 0
            >;
        };

        layer_QWERTY {
            bindings = <
               &kp F1    &kp F2   &kp F3    &kp F4     &kp F5                                                                                   &kp F6     &kp F7     &kp F8     &kp F9               &kp F10
            &kp EQUAL    &kp N1   &kp N2    &kp N3     &kp N4  &kp N5                                                                 &kp N6    &kp N7     &kp N8     &kp N9     &kp N0             &kp MINUS
            &kp GRAVE     &kp Q    &kp W     &kp E      &kp R   &kp T                                                                  &kp Y     &kp U      &kp I      &kp O      &kp P              &kp LBKT
             &kp RBKT     &kp A    &kp S     &kp D      &kp F   &kp G                                                                  &kp H     &kp J      &kp K      &kp L   &kp SEMI               &kp SQT
            &kp LCTRL     &kp Z    &kp X     &kp C      &kp V   &kp B  &lt 3 ESC      &mo 4   &kp DEL    &mo 7      &mo 6  &lt 5 RET   &kp N     &kp M  &kp COMMA    &kp DOT   &kp FSLH              &kp LALT
 &magic LAYER_Magic 0  &kp HOME  &kp END  &kp LEFT  &kp RIGHT           &kp BSPC  &kp LSHFT  &kp LGUI  &kp TAB  &kp SPACE      &mo 2          &kp DOWN     &kp UP  &kp PG_DN  &kp PG_UP  &magic LAYER_Magic 0
            >;
        };

        layer_Symbol {
            bindings = <
     &none      &none      &none      &none     &none                                                                                 &none        &none      &none      &none   &none
     &none  &kp GRAVE   &kp LPAR   &kp RPAR  &kp SEMI  &kp COMMA                                                           &none      &none        &none      &none      &none   &none
  &kp EXCL   &kp LBRC    &kp SQT    &kp DQT  &kp RBRC  &kp QMARK                                                           &none  &kp LSHFT    &kp LCTRL   &kp LALT   &kp LGUI   &none
  &kp HASH  &kp CARET  &kp EQUAL  &kp UNDER  &kp DLLR   &kp STAR                                                           &none   &kp BSPC      &kp TAB  &kp SPACE    &kp RET   &none
 &kp TILDE     &kp LT   &kp PIPE  &kp MINUS    &kp GT   &kp FSLH   &kp BSLH    &kp DOT  &kp STAR   &none   &none   &none   &none    &kp DEL  &kp LS(TAB)      &none      &none   &none
    &kp AT   &kp AMPS   &kp LBKT   &kp RBKT  &kp PLUS             &kp PRCNT  &kp COLON  &kp SEMI   &none   &none   &none           &kp DOWN       &kp UP   &kp LEFT  &kp RIGHT   &none
            >;
        };

        layer_Number {
            bindings = <
      &none      &none      &none     &none     &none                                                                               &none     &none      &none      &none      &none
      &none      &none      &none     &none     &none   &none                                                         &kp CARET  &kp HASH  &kp DLLR  &kp TILDE   &kp EXCL   &kp PIPE
      &none      &none      &none     &none     &none   &none                                                         &kp PRCNT    &kp N7    &kp N8     &kp N9  &kp COLON      &kp K
 &kp KP_NUM  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI   &none                                                          &kp PLUS    &kp N4    &kp N5     &kp N6  &kp MINUS      &kp J
      &none      &none      &none     &none     &none   &none   &none   &none   &none     &kp LT   &kp GT  &kp EQUAL   &kp STAR    &kp N1    &kp N2     &kp N3   &kp FSLH  &kp LS(G)
      &none      &none      &none     &none     &none           &none   &none   &none  &kp COMMA  &kp DOT     &kp N0               &trans    &trans     &trans     &trans     &kp AT
            >;
        };

        layer_Cursor {
            bindings = <
     &none           &none         &none         &none           &none                                                                                                &none           &none           &none      &none        &none
     &none           &none         &none         &none           &none       &none                                                                         &none      &none           &none           &none      &none        &none
 &kp _C(K)       &kp SPC_P     &kp TAB_P     &kp TAB_N       &kp SPC_N    &kp _CUT                                                                      &kp _CUT   &kp BSPC          &kp UP         &kp DEL  &kp _REDO    &kp _C(K)
 &kp _C(L)        &kp LGUI      &kp LALT     &kp LCTRL       &kp LSHFT   &kp _COPY                                                                     &kp _COPY   &kp LEFT        &kp DOWN       &kp RIGHT  &kp _UNDO    &kp _C(L)
 &kp _C(J)       &kp _FIND  &select_word  &select_line       &kp _C(A)  &kp _PASTE   &none   &none   &none         &none  &extend_line  &extend_word  &kp _PASTE  &kp PSCRN         &kp INS        &kp SLCK  &kp _C(A)    &kp _C(J)
 &kp _C(H)  &kp _FIND_PREV  &extend_word  &extend_line  &kp _FIND_NEXT               &none   &none   &none  &select_none  &select_line  &select_word              &kp _FIND  &kp _FIND_PREV  &kp _FIND_NEXT  &kp _C(H)  &kp LG(DOT)
            >;
        };

        layer_Function {
            bindings = <
  &none       &none       &none       &none       &none                                                                                          &none     &none      &none      &none   &none
  &none  &kp C_STOP  &kp C_PREV  &kp C_NEXT  &kp C_PLAY  &kp C_EJECT                                                                   &none     &none     &none      &none      &none   &none
  &none     &kp F10      &kp F7      &kp F8      &kp F9      &kp F13                                                                   &none     &none     &none      &none      &none   &none
  &none     &kp F11      &kp F4      &kp F5      &kp F6      &kp F14                                                                   &none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT   &none
  &none     &kp F12      &kp F1      &kp F2      &kp F3      &kp F15    &kp C_PP    &kp C_PREV    &kp C_NEXT   &none   &none   &none   &none     &none     &none      &none      &none   &none
  &none       &none       &none       &none       &none               &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP   &none   &none   &none             &none     &none      &none      &none   &none
            >;
        };

        layer_Mouse {
            bindings = <
  &none   &none           &none           &none            &none                                                                            &none      &none     &none     &none   &none
  &none   &none           &none           &none            &none   &none                                                         &none      &none      &none     &none     &none   &none
  &none   &none  &msc SCRL_LEFT    &mmv MOVE_UP  &msc SCRL_RIGHT   &none                                                         &none      &none      &none     &none     &none   &none
  &none   &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT   &none                                                         &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI   &none
  &none   &none           &none  &msc SCRL_DOWN     &msc SCRL_UP   &none  &mkp MCLK      &none   &none   &none   &none   &none   &none      &none      &none     &none     &none   &none
  &none   &none           &none           &none            &none          &mkp LCLK  &mkp RCLK   &none   &none   &none   &none              &none      &none     &none     &none   &none
            >;
        };

        layer_System {
            bindings = <
           &none            &none            &none            &none            &none                                                                                      &none      &none     &none     &none   &none
           &none            &none            &none            &none            &none   &none                                                                   &none      &none      &none     &none     &none   &none
           &none            &none  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI            &none   &none                                                                   &none      &none      &none     &none     &none   &none
 &rgb_ug RGB_TOG  &rgb_ug RGB_EFR  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF   &none                                                                   &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI   &none
           &none  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI   &none  &kp _LOCK  &kp _SLEEP       &kp _POWER   &none   &none   &none   &none      &none      &none     &none     &none   &none
           &none            &none            &none            &none            &none          &kp PSCRN    &kp SLCK  &kp PAUSE_BREAK   &none   &none   &none              &none      &none     &none     &none   &none
            >;
        };

        layer_Gaming {
            bindings = <
    &trans     &trans  &trans  &trans  &trans                                                                                    &trans  &trans     &trans   &trans    &trans
    &trans     &trans  &trans  &trans  &trans   &trans                                                                   &trans  &trans  &trans     &trans   &trans    &trans
 &kp MINUS  &kp GRAVE   &kp B   &kp N   &kp M  &kp SQT                                                                    &kp B   &kp N   &kp M  &kp COMMA  &kp DOT  &kp FSLH
     &kp T    &kp TAB   &kp Q   &kp W   &kp E    &kp R                                                                    &kp T   &kp Y   &kp U      &kp I    &kp O     &kp P
     &kp G  &kp LSHFT   &kp A   &kp S   &kp D    &kp F    &kp ESC   &kp RET  &kp PAUSE_BREAK  &kp BSPC  &kp DEL  &trans   &kp G   &kp H   &kp J      &kp K    &kp L  &kp SEMI
     &kp V  &kp LCTRL   &kp Z   &kp X   &kp C           &kp SPACE  &kp LALT         &kp LGUI    &tog 8   &trans  &trans          &trans  &trans     &trans   &trans    &trans
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
      &tog 1           &tog 8            &none            &none            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

    };
};
