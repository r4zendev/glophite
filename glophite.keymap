
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Graphite 0
#define LAYER_QWERTY 1
#define LAYER_ColemakDH 2
#define LAYER_MTGAP 3
#define LAYER_Magic 4
#define LAYER_Cursor 5
#define LAYER_Number 6
#define LAYER_Function 7
#define LAYER_Symbol 8
#define LAYER_Gaming 9

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

    /* Custom Defined Behaviors */
/ {
    #define SPC_P LC(LEFT)
#define SPC_N LC(RIGHT)
#define TAB_P LG(LS(LBKT))
#define TAB_N LG(LS(RBKT))

behaviors {
  w_caps: capsword_and_capslock {
      compatible = "zmk,behavior-hold-tap";
      label = "CAPSWORD_AND_CAPSLOCK";
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      #binding-cells = <2>;
      bindings = <&kp>, <&caps_word>;
  };

  quote_under: quote_and_underscore {
      compatible = "zmk,behavior-mod-morph";
      label = "QUOTE_AND_UNDERSCORE";
      #binding-cells = <0>;
      bindings = <&kp SQT>, <&kp UNDER>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  hyphen_dqt: hyphen_and_doublequote {
      compatible = "zmk,behavior-mod-morph";
      label = "HYPHEN_AND_DOUBLEQUOTE";
      #binding-cells = <0>;
      bindings = <&kp MINUS>, <&kp DQT>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  slash_lt: slash_and_lowerthan {
      compatible = "zmk,behavior-mod-morph";
      label = "SLASH_AND_LOWERTHAN";
      #binding-cells = <0>;
      bindings = <&kp FSLH>, <&kp LT>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  comma_qmark: comma_and_question {
      compatible = "zmk,behavior-mod-morph";
      label = "COMMA_AND_QUESTION";
      #binding-cells = <0>;
      bindings = <&kp COMMA>, <&kp QMARK>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  dot_semi: dot_and_semicolon {
      compatible = "zmk,behavior-mod-morph";
      label = "DOT_AND_SEMICOLON";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp SEMI>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  comma_colon: comma_and_colon {
      compatible = "zmk,behavior-mod-morph";
      label = "COMMA_AND_COLON";
      #binding-cells = <0>;
      bindings = <&kp COMMA>, <&kp COLON>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };
};

/*HACK*/};
&lt {
   tapping_term_ms = <150>;
};
/*HACK*//{
};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Graphite {
            bindings = <
               &kp F1    &kp F2   &kp F3    &kp F4     &kp F5                                                                                           &kp F6   &kp F7       &kp F8     &kp F9               &kp F10
            &kp EQUAL    &kp N1   &kp N2    &kp N3     &kp N4  &kp N5                                                                         &kp N6    &kp N7   &kp N8       &kp N9     &kp N0              &kp BSLH
            &kp GRAVE     &kp B    &kp L     &kp D      &kp W   &kp Z                                                                   &quote_under     &kp F    &kp O        &kp U      &kp J              &kp SEMI
       &w_caps CAPS 0     &kp N    &kp R     &kp T      &kp S   &kp G                                                                          &kp Y     &kp H    &kp A        &kp E      &kp I          &comma_qmark
              &kp F13     &kp Q    &kp X     &kp M      &kp C   &kp V   &lt 7 ESC  &kp LCTRL   &kp DEL  &kp LGUI   &kp LALT  &lt 6 RET         &kp K     &kp P  &kp DOT  &hyphen_dqt  &slash_lt               &kp F14
 &magic LAYER_Magic 0  &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &lt 5 BSPC  &kp LSHFT  &kp LGUI   &kp TAB  &kp SPACE      &mo 8                &kp DOWN   &kp UP    &kp PG_UP  &kp PG_DN  &magic LAYER_Magic 0
            >;
        };

        layer_QWERTY {
            bindings = <
               &kp F1    &kp F2   &kp F3    &kp F4     &kp F5                                                                                   &kp F6     &kp F7     &kp F8     &kp F9               &kp F10
            &kp EQUAL    &kp N1   &kp N2    &kp N3     &kp N4  &kp N5                                                                 &kp N6    &kp N7     &kp N8     &kp N9     &kp N0              &kp BSLH
            &kp GRAVE     &kp Q    &kp W     &kp E      &kp R   &kp T                                                                  &kp Y     &kp U      &kp I      &kp O      &kp P              &kp FSLH
       &w_caps CAPS 0     &kp A    &kp S     &kp D      &kp F   &kp G                                                                  &kp H     &kp J      &kp K      &kp L   &kp SEMI               &kp SQT
              &kp F13     &kp Z    &kp X     &kp C      &kp V   &kp B   &lt 7 ESC  &kp LCTRL   &kp DEL  &kp LGUI   &kp LALT  &kp RET   &kp N     &kp M  &kp COMMA    &kp DOT   &kp FSLH               &kp F14
 &magic LAYER_Magic 0  &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &lt 5 BSPC  &kp LSHFT  &kp LGUI   &kp TAB  &kp SPACE    &mo 8          &kp DOWN     &kp UP  &kp PG_UP  &kp PG_DN  &magic LAYER_Magic 0
            >;
        };

        layer_ColemakDH {
            bindings = <
               &kp F1    &kp F2   &kp F3    &kp F4     &kp F5                                                                                   &kp F6     &kp F7     &kp F8     &kp F9               &kp F10
            &kp EQUAL    &kp N1   &kp N2    &kp N3     &kp N4  &kp N5                                                                 &kp N6    &kp N7     &kp N8     &kp N9     &kp N0              &kp BSLH
            &kp GRAVE     &kp Q    &kp W     &kp F      &kp P   &kp B                                                                  &kp J     &kp L      &kp U      &kp Y    &kp SQT             &kp MINUS
       &w_caps CAPS 0     &kp A    &kp R     &kp S      &kp T   &kp G                                                                  &kp M     &kp N      &kp E      &kp I      &kp O              &kp SEMI
              &kp F13     &kp Z    &kp X     &kp C      &kp D   &kp V   &lt 7 ESC  &kp LCTRL   &kp DEL  &kp LGUI   &kp LALT  &kp RET   &kp K     &kp H  &kp COMMA    &kp DOT   &kp FSLH               &kp F14
 &magic LAYER_Magic 0  &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &lt 5 BSPC  &kp LSHFT  &kp LGUI   &kp TAB  &kp SPACE    &mo 8          &kp DOWN     &kp UP  &kp PG_UP  &kp PG_DN  &magic LAYER_Magic 0
            >;
        };

        layer_MTGAP {
            bindings = <
               &kp F1    &kp F2     &kp F3    &kp F4     &kp F5                                                                                         &kp F6  &kp F7     &kp F8     &kp F9               &kp F10
            &kp EQUAL    &kp N1     &kp N2    &kp N3     &kp N4        &kp N5                                                                 &kp N6    &kp N7  &kp N8     &kp N9     &kp N0              &kp BSLH
            &kp GRAVE     &kp Y      &kp P     &kp O      &kp U         &kp J                                                                  &kp K     &kp D   &kp L      &kp C      &kp W                 &kp X
       &w_caps CAPS 0     &kp I      &kp N     &kp E      &kp A  &comma_colon                                                                  &kp M     &kp H   &kp T      &kp S      &kp R                 &kp Q
              &kp F13  &kp FSLH  &kp QMARK   &kp SQT  &dot_semi     &kp UNDER   &lt 7 ESC  &kp LCTRL   &kp DEL  &kp LGUI   &kp LALT  &kp RET   &kp B     &kp F   &kp G      &kp V      &kp Z               &kp F14
 &magic LAYER_Magic 0  &kp HOME    &kp END  &kp LEFT  &kp RIGHT                &lt 5 BSPC  &kp LSHFT  &kp LGUI   &kp TAB  &kp SPACE    &mo 8          &kp DOWN  &kp UP  &kp PG_UP  &kp PG_DN  &magic LAYER_Magic 0
            >;
        };

        layer_Magic {
            bindings = <
  &bt BT_CLR            &none            &none            &none            &none                                                                                  &none   &none   &none   &none  &bt BT_CLR_ALL
      &tog 9           &tog 1           &tog 2           &tog 3            &none            &none                                                         &none   &none   &none   &none   &none           &none
       &none  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                         &none   &none   &none   &none   &none           &none
 &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                         &none   &none   &none   &none   &none     &bootloader
  &sys_reset            &none            &none            &none            &none            &none   &bt_2   &bt_3         &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
       &none            &none            &none            &none            &none                    &bt_0   &bt_1  &out OUT_USB   &none   &none   &none           &none   &none   &none   &none           &none
            >;
        };

        layer_Cursor {
            bindings = <
     &none      &none      &none      &none      &none                                                                                                   &none         &none          &none    &none   &none
     &none      &none      &none      &none      &none      &none                                                                              &none     &none         &none          &none    &none   &none
 &kp LG(K)  &kp SPC_P  &kp TAB_P  &sk LSHFT  &kp TAB_N  &kp SPC_N                                                                          &kp PG_UP  &kp HOME        &kp UP        &kp END  &kp TAB   &none
 &kp LG(F)   &kp LGUI   &kp LALT  &kp LCTRL  &kp LSHFT  &kp LG(S)                                                                          &kp PG_DN  &kp LEFT      &kp DOWN      &kp RIGHT  &kp RET   &none
 &kp LG(I)  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(A)   &none   &none   &none   &kp LS(LA(LEFT))  &kp LA(BSPC)    &kp LA(DEL)      &none  &kp BSPC  &kp LG(LEFT)  &kp LG(RIGHT)  &kp DEL   &none
 &kp LG(Q)      &none      &none      &none      &none              &none   &none   &none  &kp LS(LA(RIGHT))  &kp LA(LEFT)  &kp LA(RIGHT)                &none         &none          &none    &none   &none
            >;
        };

        layer_Number {
            bindings = <
    &none      &none      &none     &none     &none                                                                                &none      &none     &none     &none       &none
 &kp PIPE   &kp EXCL  &kp TILDE  &kp DLLR  &kp HASH  &kp CARET                                                          &none      &none      &none     &none     &none       &none
    &kp K  &kp COLON     &kp N7    &kp N8    &kp N9  &kp PRCNT                                                          &none      &none      &none     &none     &none       &none
    &kp J  &kp MINUS     &kp N4    &kp N5    &kp N6   &kp PLUS                                                          &none  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &kp KP_NUM
    &kp R   &kp FSLH     &kp N1    &kp N2    &kp N3   &kp STAR  &kp EQUAL   &kp LT     &kp GT   &none   &none   &none   &none      &none      &none     &none     &none       &none
   &kp AT   &kp LPAR   &kp LBKT  &kp RBKT  &kp RPAR                &kp N0  &kp DOT  &kp COMMA   &none   &none   &none              &none      &none     &none     &none       &none
            >;
        };

        layer_Function {
            bindings = <
  &none     &none     &none      &none      &none                                                                                                    &none         &none         &none          &none           &none
  &none     &none     &none      &none      &none   &none                                                                  &kp C_MEDIA_HOME     &kp C_PLAY    &kp C_PREV    &kp C_NEXT     &kp C_STOP     &kp C_EJECT
  &none     &none     &none      &none      &none   &none                                                                         &kp K_WWW         &kp F7        &kp F8        &kp F9        &kp F10         &kp F13
  &none  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT   &none                                                                        &kp K_CALC         &kp F4        &kp F5        &kp F6        &kp F11         &kp F14
  &none     &none     &none      &none      &none   &none   &none   &none   &none  &kp C_PREV    &kp C_NEXT      &kp C_PP    &kp C_AL_FILES         &kp F1        &kp F2        &kp F3        &kp F12         &kp F15
  &none     &none     &none      &none      &none           &none   &none   &none  &kp C_MUTE  &kp C_VOL_DN  &kp C_VOL_UP                    &kp C_BRI_MAX  &kp C_BRI_UP  &kp C_BRI_DN  &kp C_BRI_MIN  &kp C_BRI_AUTO
            >;
        };

        layer_Symbol {
            bindings = <
     &none      &none      &none      &none     &none                                                                                 &none        &none      &none     &none   &none
     &none  &kp GRAVE   &kp LPAR   &kp RPAR  &kp SEMI  &kp COMMA                                                           &none      &none        &none      &none     &none   &none
  &kp EXCL   &kp LBRC    &kp SQT    &kp DQT  &kp RBRC  &kp QMARK                                                           &none  &kp LSHFT    &kp LCTRL   &kp LALT  &kp LGUI   &none
  &kp HASH  &kp CARET  &kp EQUAL  &kp UNDER  &kp DLLR   &kp STAR                                                           &none   &kp BSPC      &kp TAB  &kp SPACE   &kp RET   &none
 &kp TILDE     &kp LT   &kp PIPE  &kp MINUS    &kp GT   &kp FSLH   &kp BSLH    &kp DOT  &kp STAR   &none   &none   &none   &none    &kp DEL  &kp LS(TAB)      &none     &none   &none
    &kp AT   &kp AMPS   &kp LBKT   &kp RBKT  &kp PLUS             &kp PRCNT  &kp COLON  &kp SEMI   &none   &none   &none              &none        &none      &none     &none   &none
            >;
        };

        layer_Gaming {
            bindings = <
    &trans     &trans  &trans  &trans  &trans                                                                                     &trans  &trans     &trans   &trans    &trans
    &trans     &trans  &trans  &trans  &trans   &trans                                                                    &trans  &trans  &trans     &trans   &trans    &trans
 &kp MINUS  &kp GRAVE   &kp B   &kp N   &kp M  &kp SQT                                                                     &kp B   &kp N   &kp M  &kp COMMA  &kp DOT  &kp FSLH
     &kp T    &kp TAB   &kp Q   &kp W   &kp E    &kp R                                                                     &kp T   &kp Y   &kp U      &kp I    &kp O     &kp P
     &kp G  &kp LSHFT   &kp A   &kp S   &kp D    &kp F    &kp ESC   &kp RET  &kp PAUSE_BREAK  &kp BSPC  &kp DEL  &kp RET   &kp G   &kp H   &kp J      &kp K    &kp L  &kp SEMI
     &kp V  &kp LCTRL   &kp Z   &kp X   &kp C           &kp SPACE  &kp LALT         &kp LGUI    &tog 9  &kp TAB    &kp E          &trans  &trans     &trans   &trans    &trans
            >;
        };

    };
};
