
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Graphite 0
#define LAYER_Magic 1
#define LAYER_Nav 2
#define LAYER_Sym 3
#define LAYER_Num 4

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

    /* Custom Defined Behaviors */
/ {
    #define SPC_P LC(LEFT)
#define SPC_N LC(RIGHT)
#define TAB_P LG(LS(LBKT))
#define TAB_N LG(LS(RBKT))

// TODO: add QWERTY, and possibly other layouts to test
#define ALPHA_LAYERS 0

#define COMBO_TIMEOUT_MS 75

/*                    Keys
╭──────────────────────╮ ╭──────────────────────╮
│x  x  x  x  x         │ │         x  x  x  x  x│
│xx xx xx xx xx xx     │ │     xx xx xx xx xx xx│
│xx 23 24 25 26 27     │ │     28 29 30 31 32 xx│
│xx 35 36 37 38 39     │ │     40 41 42 43 44 xx│
│xx 47 48 49 50 51     │ │     58 59 60 61 62 xx│
│xx xx xx xx xx        │ │        xx xx xx xx xx│
│               69 xx  │ │  xx 74               │
│                70 xx │ │ xx 73                │
╰───────────────╮ xx xx│ │xx xx ╭───────────────╯
                ╰──────╯ ╰──────╯              */

combos {
  compatible = "zmk,combos";

  combo_caps {
    bindings = <&w_caps CAPS 0>;
    key-positions = <39 40>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };

  combo_tab {
    bindings = <&kp TAB>;
    key-positions = <26 27>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };

  combo_esc {
    bindings = <&kp ESC>;
    key-positions = <47 48>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };

  combo_alt {
    bindings = <&kp LALT>;
    key-positions = <48 49>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };



  combo_bspc {
    bindings = <&kp BSPC>;
    key-positions = <60 61>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };

  combo_ret {
    bindings = <&kp RET>;
    key-positions = <61 62>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };

  combo_lshft {
    bindings = <&kp LSHFT>;
    key-positions = <44 62>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };



  combo_cmd {
    bindings = <&kp LGUI>;
    key-positions = <69 70>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };

  combo_ctrl {
    bindings = <&kp LCTRL>;
    key-positions = <73 74>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };

  combo_num_layer {
    bindings = <&mo 4>;
    key-positions = <69 74>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };
};

behaviors {
  w_caps: capsword_and_capslock {
      compatible = "zmk,behavior-hold-tap";
      label = "CAPSWORD_AND_CAPSLOCK";
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      #binding-cells = <2>;
      bindings = <&kp>, <&caps_word>;
  };

  quote_under: quote_and_underscore {
      compatible = "zmk,behavior-mod-morph";
      label = "QUOTE_AND_UNDERSCORE";
      #binding-cells = <0>;
      bindings = <&kp SQT>, <&kp UNDER>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  hyphen_semi: hyphen_and_semicolon {
      compatible = "zmk,behavior-mod-morph";
      label = "HYPHEN_AND_SEMICOLON";
      #binding-cells = <0>;
      bindings = <&kp MINUS>, <&kp SEMI>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  comma_qmark: comma_and_question {
      compatible = "zmk,behavior-mod-morph";
      label = "COMMA_AND_QUESTION";
      #binding-cells = <0>;
      bindings = <&kp COMMA>, <&kp QMARK>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  dot_excl: dot_and_exclmark {
      compatible = "zmk,behavior-mod-morph";
      label = "DOT_AND_EXCL";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp EXCL>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };
};
};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Graphite {
            bindings = <
                &none   &none   &none   &none   &none                                                                               &none         &none      &none         &none                 &none
                &none   &none   &none   &none   &none   &none                                                               &none   &none         &none      &none         &none                 &none
                &none   &kp B   &kp L   &kp D   &kp W   &kp Z                                                        &quote_under   &kp F         &kp O      &kp U         &kp J                 &none
                &none   &kp N   &kp R   &kp T   &kp S   &kp G                                                               &kp Y   &kp H         &kp A      &kp E         &kp I                 &none
                &none   &kp X   &kp Q   &kp M   &kp C   &kp V   &none      &none   &none   &none      &none   &none         &kp P   &kp K  &comma_qmark  &dot_excl  &hyphen_semi                 &none
 &magic LAYER_Magic 0   &none   &none   &none   &none           &mo 2  &kp LSHFT   &none   &none  &kp SPACE   &mo 3                 &none         &none      &none         &none  &magic LAYER_Magic 0
            >;
        };

        layer_Magic {
            bindings = <
          &none            &none            &none            &none            &none                                                                            &none   &none   &none   &none           &none
          &none            &none            &none            &none            &none            &none                                                   &none   &none   &none   &none   &none           &none
 &bt BT_CLR_ALL  &rgb_ug RGB_SPI  &rgb_ug RGB_SAI  &rgb_ug RGB_HUI  &rgb_ug RGB_BRI  &rgb_ug RGB_TOG                                                   &none   &none   &none   &none   &none  &bt BT_CLR_ALL
    &bootloader  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_HUD  &rgb_ug RGB_BRD  &rgb_ug RGB_EFF                                                   &none   &none   &none   &none   &none     &bootloader
     &sys_reset            &none            &none            &none            &none            &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none   &none      &sys_reset
          &none            &none            &none            &none            &none                    &bt_0   &bt_1   &none   &none   &bt_2   &bt_3           &none   &none   &none   &none           &none
            >;
        };

        layer_Nav {
            bindings = <
  &none      &none      &none      &none      &none                                                                                           &none         &none          &none          &none   &none
  &none      &none      &none      &none      &none      &none                                                                      &none     &none         &none          &none          &none   &none
  &none    &kp TAB  &kp TAB_P  &kp TAB_N  &kp SPC_P  &kp SPC_N                                                                  &kp PG_UP  &kp HOME        &kp UP        &kp END  &kp LC(SPACE)   &none
  &none  &sk LSHFT  &sk LCTRL   &sk LALT   &sk LGUI  &kp LG(S)                                                                  &kp PG_DN  &kp LEFT      &kp DOWN      &kp RIGHT        &kp RET   &none
  &none  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(A)   &none   &none   &none   &none         &none          &none  &kp LA(BSPC)  &kp BSPC  &kp LG(LEFT)  &kp LG(RIGHT)        &kp DEL   &none
  &none      &none      &none      &none      &none              &none   &none   &none   &none  &kp LA(LEFT)  &kp LA(RIGHT)                   &none         &none          &none          &none   &none
            >;
        };

        layer_Sym {
            bindings = <
  &none      &none      &none      &none      &none                                                                                &none     &none      &none      &none   &none
  &none      &none      &none      &none      &none      &none                                                          &none      &none     &none      &none      &none   &none
  &none     &kp LT   &kp LBKT   &kp LBRC   &kp LPAR   &kp HASH                                                       &kp STAR   &kp RPAR  &kp RBRC   &kp RBKT     &kp GT   &none
  &none   &kp PLUS  &kp MINUS  &kp PRCNT  &kp EQUAL  &kp UNDER                                                       &kp DLLR   &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT   &none
  &none  &kp TILDE  &kp GRAVE   &kp PIPE   &kp EXCL   &kp FSLH     &none      &none   &none   &none   &none   &none  &kp BSLH  &kp QMARK  &kp AMPS  &kp CARET     &kp AT   &none
  &none      &none      &none      &none      &none             &kp SEMI  &kp COLON   &none   &none   &none   &none                &none     &none      &none      &none   &none
            >;
        };

        layer_Num {
            bindings = <
  &none    &none      &none     &none     &none                                                                       &none     &none      &none    &none   &none
  &none    &none      &none     &none     &none    &none                                                    &none     &none     &none      &none    &none   &none
  &none   &kp N1     &kp N2    &kp N3    &kp N4   &kp N5                                                   &kp N6    &kp N7    &kp N8     &kp N9   &kp N0   &none
  &none  &kp F11  &sk LCTRL  &sk LALT  &sk LGUI  &sk F13                                                  &sk F14  &sk LGUI  &sk LALT  &sk LCTRL  &kp F12   &none
  &none   &kp F1     &kp F2    &kp F3    &kp F4   &kp F5   &none   &none   &none   &none   &none   &none   &kp F6    &kp F7    &kp F8     &kp F9  &kp F10   &none
  &none    &none      &none     &none     &none            &none   &none   &none   &none   &none   &none              &none     &none      &none    &none   &none
            >;
        };

    };
};
