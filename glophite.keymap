
/*
 * Copyright (c) 2020 The ZMK Contributors
 * Copyright (c) 2023 Innaworks Development Limited, trading as MoErgo
 *
 * SPDX-License-Identifier: MIT
 */


/* THIS FILE WAS GENERATED BY GLOVE80 LAYOUT EDITOR
 *
 * This file was generated automatically. You may or may not want to
 * edit it directly.
 */

#include <behaviors.dtsi>
/* Include all behaviour includes needed */
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/rgb.h>

/* Automatically generated layer name #define */
#define LAYER_Graphite 0
#define LAYER_QWERTY 1
#define LAYER_Symbol 2
#define LAYER_Cursor 3
#define LAYER_Mouse 4
#define LAYER_Function 5
#define LAYER_System 6
#define LAYER_Magic 7
#define LAYER_Gaming 8

/* To deal with the situation where there is no Lower layer, to keep &lower happy */
#ifndef LAYER_Lower
#define LAYER_Lower 0
#endif

/* Custom Device-tree */



/* Glove80 system behavior & macros */
/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to
        lower: lower {
            compatible = "zmk,behavior-tap-dance";
            label = "LAYER_TAP_DANCE";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo LAYER_Lower>, <&to LAYER_Lower>;
        };
    };
};

/ {
    macros {
        rgb_ug_status_macro: rgb_ug_status_macro {
            label = "RGB_UG_STATUS";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&rgb_ug RGB_STATUS>;
        };
    };
};


/ {
#ifdef BT_DISC_CMD
    behaviors {
        bt_0: bt_0 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_0";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_0>, <&bt BT_DISC 0>;
        };
        bt_1: bt_1 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_1";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_1>, <&bt BT_DISC 1>;
        };
        bt_2: bt_2 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_2";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_2>, <&bt BT_DISC 2>;
        };
        bt_3: bt_3 {
            compatible = "zmk,behavior-tap-dance";
            label = "BT_3";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&bt_select_3>, <&bt BT_DISC 3>;
        };
    };
    macros {
        bt_select_0: bt_select_0 {
            label = "BT_SELECT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_select_1: bt_select_1 {
            label = "BT_SELECT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_select_2: bt_select_2 {
            label = "BT_SELECT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_select_3: bt_select_3 {
            label = "BT_SELECT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#else
    macros {
        bt_0: bt_0 {
            label = "BT_0";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 0>;
        };
        bt_1: bt_1 {
            label = "BT_1";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 1>;
        };
        bt_2: bt_2 {
            label = "BT_2";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 2>;
        };
        bt_3: bt_3 {
            label = "BT_3";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings
                = <&out OUT_BLE>,
                  <&bt BT_SEL 3>;
        };
    };
#endif
};

/ {
    behaviors {
        magic: magic {
            compatible = "zmk,behavior-hold-tap";
            label = "MAGIC_HOLD_TAP";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            bindings = <&mo>, <&rgb_ug_status_macro>;
        };
    };
};

/* #define for key positions */
#define POS_LH_T1 52
#define POS_LH_T2 53
#define POS_LH_T3 54
#define POS_LH_T4 69
#define POS_LH_T5 70
#define POS_LH_T6 71
#define POS_LH_C1R2 15
#define POS_LH_C1R3 27
#define POS_LH_C1R4 39
#define POS_LH_C1R5 51
#define POS_LH_C2R1 4
#define POS_LH_C2R2 14
#define POS_LH_C2R3 26
#define POS_LH_C2R4 38
#define POS_LH_C2R5 50
#define POS_LH_C2R6 68
#define POS_LH_C3R1 3
#define POS_LH_C3R2 13
#define POS_LH_C3R3 25
#define POS_LH_C3R4 37
#define POS_LH_C3R5 49
#define POS_LH_C3R6 67
#define POS_LH_C4R1 2
#define POS_LH_C4R2 12
#define POS_LH_C4R3 24
#define POS_LH_C4R4 36
#define POS_LH_C4R5 48
#define POS_LH_C4R6 66
#define POS_LH_C5R1 1
#define POS_LH_C5R2 11
#define POS_LH_C5R3 23
#define POS_LH_C5R4 35
#define POS_LH_C5R5 47
#define POS_LH_C5R6 65
#define POS_LH_C6R1 0
#define POS_LH_C6R2 10
#define POS_LH_C6R3 22
#define POS_LH_C6R4 34
#define POS_LH_C6R5 46
#define POS_LH_C6R6 64
#define POS_RH_T1 57
#define POS_RH_T2 56
#define POS_RH_T3 55
#define POS_RH_T4 74
#define POS_RH_T5 73
#define POS_RH_T6 72
#define POS_RH_C1R2 16
#define POS_RH_C1R3 28
#define POS_RH_C1R4 40
#define POS_RH_C1R5 58
#define POS_RH_C2R1 5
#define POS_RH_C2R2 17
#define POS_RH_C2R3 29
#define POS_RH_C2R4 41
#define POS_RH_C2R5 59
#define POS_RH_C2R6 75
#define POS_RH_C3R1 6
#define POS_RH_C3R2 18
#define POS_RH_C3R3 30
#define POS_RH_C3R4 42
#define POS_RH_C3R5 60
#define POS_RH_C3R6 76
#define POS_RH_C4R1 7
#define POS_RH_C4R2 19
#define POS_RH_C4R3 31
#define POS_RH_C4R4 43
#define POS_RH_C4R5 61
#define POS_RH_C4R6 77
#define POS_RH_C5R1 8
#define POS_RH_C5R2 20
#define POS_RH_C5R3 32
#define POS_RH_C5R4 44
#define POS_RH_C5R5 62
#define POS_RH_C5R6 78
#define POS_RH_C6R1 9
#define POS_RH_C6R2 21
#define POS_RH_C6R3 33
#define POS_RH_C6R4 45
#define POS_RH_C6R5 63
#define POS_RH_C6R6 79

    /* Custom Defined Behaviors */
/ {
    #ifndef OPERATING_SYSTEM
//#define OPERATING_SYSTEM 1 // linux
#define OPERATING_SYSTEM 2 // macos
//#define OPERATING_SYSTEM 3 // windows
#endif
#if OPERATING_SYSTEM == 2
    #define _C      LG
    #define _REDO   _C(LS(Z))
    #define _POWER  K_POWER
    #define _W      LA
    #define _HOME   _C(LEFT)
    #define _END    _C(RIGHT)
    #define SPC_P   LC(LEFT)
    #define SPC_N   LC(RIGHT)
    #define TAB_P   _C(LS(LBKT))
    #define TAB_N   _C(LS(RBKT))
#else
    #define _C      LC
    #define _REDO   _C(Y)
    #define _POWER  C_POWER
    #define _W      _C
    #define _HOME   HOME
    #define _END    END
#endif
#define _SLEEP      C_SLEEP
#if OPERATING_SYSTEM == 3
    #define _LOCK   LG(L)
#elif OPERATING_SYSTEM == 2
    #define _LOCK   _C(LC(Q))
#elif OPERATING_SYSTEM == 1
    #define _LOCK   K_LOCK
#endif
#define _UNDO       _C(Z)
#define _CUT        _C(X)
#define _COPY       _C(C)
#define _PASTE      _C(V)
#define _FIND       _C(F)
#define _FIND_NEXT  _C(G)
#define _FIND_PREV  _C(LS(G))

//
// Glove80 specific symbol overrides to support non "en-US" locales
//
#undef  AMPS
#define AMPS  LS(N7)
#undef  AT
#define AT    LS(N2)
#undef  CARET
#define CARET LS(N6)
#undef  COLON
#define COLON LS(SEMI)
#undef  DLLR
#define DLLR  LS(N4)
#undef  DQT
#define DQT   LS(SQT)
#undef  EXCL
#define EXCL  LS(N1)
#undef  GT
#define GT    LS(DOT)
#undef  HASH
#define HASH  LS(N3)
#undef  LBRC
#define LBRC  LS(LBKT)
#undef  LPAR
#define LPAR  LS(N9)
#undef  LT
#define LT    LS(COMMA)
#undef  PIPE
#define PIPE  LS(BSLH)
#undef  PLUS
#define PLUS  LS(EQUAL)
#undef  PRCNT
#define PRCNT LS(N5)
#undef  QMARK
#define QMARK LS(FSLH)
#undef  RBRC
#define RBRC  LS(RBKT)
#undef  RPAR
#define RPAR  LS(N0)
#undef  STAR
#define STAR  LS(N8)
#undef  TILDE
#define TILDE LS(GRAVE)
#undef  UNDER
#define UNDER LS(MINUS)


// TODO: add QWERTY, and possibly other layouts to test
#define ALPHA_LAYERS 0 1

#define COMBO_TIMEOUT_MS 75

/*                    Keys
╭──────────────────────╮ ╭──────────────────────╮
│x  x  x  x  x         │ │         x  x  x  x  x│
│xx xx xx xx xx xx     │ │     xx xx xx xx xx xx│
│22 23 24 25 26 27     │ │     28 29 30 31 32 33│
│34 35 36 37 38 39     │ │     40 41 42 43 44 45│
│46 47 48 49 50 51     │ │     58 59 60 61 62 63│
│xx xx xx xx xx        │ │        xx xx xx xx xx│
│               69 52  │ │  57 74               │
│                70 xx │ │ xx 73                │
╰───────────────╮ xx xx│ │xx xx ╭───────────────╯
                ╰──────╯ ╰──────╯              */

combos {
  compatible = "zmk,combos";

  combo_caps {
    bindings = <&w_caps>;
    key-positions = <39 40>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };



  combo_tab {
    bindings = <&kp TAB>;
    key-positions = <47 48>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };

  combo_bspc {
    bindings = <&kp BSPC>;
    key-positions = <61 62>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };



  combo_cmd {
    bindings = <&kp LGUI>;
    key-positions = <69 70>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };

  combo_shft {
    bindings = <&kp LSHFT>;
    key-positions = <73 74>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };



  combo_sys_layer {
    bindings = <&mo 6>;
    key-positions = <52 57>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };

  tog_qwerty_layout {
    bindings = <&tog 1>;
    key-positions = <22 33>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };

  tog_gaming_layout {
    bindings = <&tog 8>;
    key-positions = <46 63>;
    layers = <ALPHA_LAYERS>;
    timeout-ms = <COMBO_TIMEOUT_MS>;
  };
};

behaviors {
  w_caps: capsword_and_capslock {
      compatible = "zmk,behavior-mod-morph";
      label = "CAPSWORD_AND_CAPSLOCK";
      #binding-cells = <0>;
      bindings = <&caps_word>, <&kp CAPS>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  quote_under: quote_and_underscore {
      compatible = "zmk,behavior-mod-morph";
      label = "QUOTE_AND_UNDERSCORE";
      #binding-cells = <0>;
      bindings = <&kp SQT>, <&kp UNDER>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  hyphen_qmark: hyphen_and_question {
      compatible = "zmk,behavior-mod-morph";
      label = "HYPHEN_AND_QUESTION";
      #binding-cells = <0>;
      bindings = <&kp MINUS>, <&kp QMARK>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  comma_excl: comma_and_excl {
      compatible = "zmk,behavior-mod-morph";
      label = "COMMA_AND_EXCL";
      #binding-cells = <0>;
      bindings = <&kp COMMA>, <&kp EXCL>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  dot_dqt: dot_and_dqt {
      compatible = "zmk,behavior-mod-morph";
      label = "DOT_AND_DQT";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp DQT>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  fslh_bslh: fslh_and_bslh {
      compatible = "zmk,behavior-mod-morph";
      label = "FSLH_AND_BSLH";
      #binding-cells = <0>;
      bindings = <&kp FSLH>, <&kp BSLH>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
  };

  //////////////////////////////////////////////////////////////////////////
  //
  // ZMK global overrides
  //
  //////////////////////////////////////////////////////////////////////////

  //
  // CapsWord - ported from Pascal Getreuer's extension for QMK
  // - https://zmk.dev/docs/behaviors/caps-word
  // - https://getreuer.info/posts/keyboards/caps-word/index.html
  //
  behavior_caps_word {
      continue-list = <
          UNDERSCORE MINUS
          BACKSPACE DELETE
          N1 N2 N3 N4 N5 N6 N7 N8 N9 N0
      >;
  };
};

macros {
    //////////////////////////////////////////////////////////////////////////
    //
    // Approximation of Pascal Getreuer's Select Word macro from QMK
    // - https://getreuer.info/posts/keyboards/select-word/index.html
    //
    //////////////////////////////////////////////////////////////////////////

    //
    // SELECT_WORD_DELAY defines how long the macro waits (milliseconds)
    // after moving the cursor before it selects a word.  A larger delay
    // may allow the macro to move to the next word upon each invocation.
    //
    #ifndef SELECT_WORD_DELAY
    #define SELECT_WORD_DELAY 1
    #endif

    ZMK_MACRO(select_none,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp DOWN &kp UP &kp RIGHT &kp LEFT>;
    )

    //
    // select a word (jumps to next word upon each successive invocation)
    //
    select_word: select_word {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&select_word_right>, <&select_word_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ZMK_MACRO(select_word_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _W(RIGHT) &kp _W(LEFT) &kp _W(LS(RIGHT))>;
    )
    ZMK_MACRO(select_word_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _W(LEFT) &kp _W(RIGHT) &kp _W(LS(LEFT))>;
    )

    //
    // extend current selection by one word
    //
    extend_word: extend_word {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&extend_word_right>, <&extend_word_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ZMK_MACRO(extend_word_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _W(LS(RIGHT))>;
    )
    ZMK_MACRO(extend_word_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _W(LS(LEFT))>;
    )

    //
    // select current line
    //
    select_line: select_line {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&select_line_right>, <&select_line_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ZMK_MACRO(select_line_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _HOME &kp LS(_END)>;
    )
    ZMK_MACRO(select_line_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp _END &kp LS(_HOME)>;
    )

    //
    // extend current selection by one line
    //
    extend_line: extend_line {
        compatible = "zmk,behavior-mod-morph";
        #binding-cells = <0>;
        bindings = <&extend_line_right>, <&extend_line_left>;
        mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    ZMK_MACRO(extend_line_right,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LS(DOWN) &kp LS(_END)>;
    )
    ZMK_MACRO(extend_line_left,
        wait-ms = <SELECT_WORD_DELAY>;
        tap-ms = <SELECT_WORD_DELAY>;
        bindings = <&kp LS(UP) &kp LS(_HOME)>;
    )
};

//////////////////////////////////////////////////////////////////////////
//
// Mouse keys (control mouse via keyboard) -- requires PR23 beta firmware:
// select "community.pr23.mouse-keys" from the drop-down menu located at
// Glove80 Layout Editor > Settings > Advanced Settings > Firmware Version
//
// - https://github.com/moergo-sc/zmk/pull/23
// - https://gist.github.com/krissen/dd27082e7ab0575619c7a31f4d2ec7ae
// - https://github.com/zmkfirmware/zmk/compare/main...urob:zmk:mouse-3.2
//
//////////////////////////////////////////////////////////////////////////

//
// MOUSE_MOTION_DELAY defines how long to wait (milliseconds) before starting
// to move the mouse pointer.
//
#ifndef MOUSE_MOTION_DELAY
#define MOUSE_MOTION_DELAY 0
#endif

//
// MOUSE_MOTION_ACCELERATION_EXPONENT sets how the mouse pointer accelerates:
//
// acceleration exponent 0: uniform speed
// acceleration exponent 1: uniform acceleration
// acceleration exponent 2: uniform jerk
//
#ifndef MOUSE_MOTION_ACCELERATION_EXPONENT
#define MOUSE_MOTION_ACCELERATION_EXPONENT 1
#endif

//
// MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED defines how long to wait (milliseconds)
// before the mouse pointer speed is suddenly boosted to the maximum value.
//
#ifndef MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED
#define MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED 400
#endif

//
// MOUSE_MOTION_MAXIMUM_SPEED defines how quickly the mouse pointer can move.
//
#ifndef MOUSE_MOTION_MAXIMUM_SPEED
#define MOUSE_MOTION_MAXIMUM_SPEED 1600
#endif

//
// MOUSE_SCROLL_DELAY defines how long to wait (milliseconds) before starting
// to move the mouse pointer.
//
#ifndef MOUSE_SCROLL_DELAY
#define MOUSE_SCROLL_DELAY 0
#endif

//
// MOUSE_SCROLL_ACCELERATION_EXPONENT sets how the mouse pointer accelerates:
//
// acceleration exponent 0: uniform speed
// acceleration exponent 1: uniform acceleration
// acceleration exponent 2: uniform jerk
//
#ifndef MOUSE_SCROLL_ACCELERATION_EXPONENT
#define MOUSE_SCROLL_ACCELERATION_EXPONENT 0
#endif

//
// MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED defines how long to wait (milliseconds)
// before the mouse pointer speed is suddenly boosted to the maximum value.
//
#ifndef MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED
#define MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED 200
#endif

//
// MOUSE_SCROLL_MAXIMUM_SPEED defines how quickly the mouse wheel can scroll.
//
#ifndef MOUSE_SCROLL_MAXIMUM_SPEED
#define MOUSE_SCROLL_MAXIMUM_SPEED 20
#endif

/*HACK*/};
// ==== MOUSE-KEY <section begins> ====
#define ZMK_MOUSE_DEFAULT_MOVE_VAL MOUSE_MOTION_MAXIMUM_SPEED
#define ZMK_MOUSE_DEFAULT_SCRL_VAL MOUSE_SCROLL_MAXIMUM_SPEED
#include <dt-bindings/zmk/mouse.h>
&mmv {
  delay-ms = <MOUSE_MOTION_DELAY>;
  acceleration-exponent = <MOUSE_MOTION_ACCELERATION_EXPONENT>;
  time-to-max-speed-ms = <MOUSE_MOTION_TIME_TO_MAXIMUM_SPEED>;
};
&msc {
  delay-ms = <MOUSE_SCROLL_DELAY>;
  acceleration-exponent = <MOUSE_SCROLL_ACCELERATION_EXPONENT>;
  time-to-max-speed-ms = <MOUSE_SCROLL_TIME_TO_MAXIMUM_SPEED>;
};
// ==== MOUSE-KEY <section ends> =====
/*HACK*//{
};

    /* Automatically generated keymap */
/ {
    keymap {
        compatible = "zmk,keymap";


        layer_Graphite {
            bindings = <
                &none   &none   &none   &none   &none                                                                               &none         &none          &none        &none                 &none
                &none   &none   &none   &none   &none   &none                                                               &none   &none         &none          &none        &none                 &none
            &kp GRAVE   &kp B   &kp L   &kp D   &kp W   &kp Z                                                               &kp J   &kp F         &kp O          &kp U  &comma_excl            &fslh_bslh
            &kp LCTRL   &kp N   &kp R   &kp T   &kp S   &kp G                                                               &kp Y   &kp H         &kp A          &kp E        &kp I              &kp LALT
              &kp F13   &kp X   &kp Q   &kp M   &kp C   &kp V  &lt 5 ESC      &none   &none   &none      &none  &lt 4 RET   &kp K   &kp P  &quote_under  &hyphen_qmark     &dot_dqt               &kp F14
 &magic LAYER_Magic 0   &none   &none   &none   &none              &mo 3  &kp LSHFT   &none   &none  &kp SPACE      &mo 2           &none         &none          &none        &none  &magic LAYER_Magic 0
            >;
        };

        layer_QWERTY {
            bindings = <
                &none   &none   &none   &none   &none                                                                               &none      &none    &none     &none                 &none
                &none   &none   &none   &none   &none   &none                                                               &none   &none      &none    &none     &none                 &none
            &kp GRAVE   &kp Q   &kp W   &kp E   &kp R   &kp T                                                               &kp Y   &kp U      &kp I    &kp O     &kp P              &kp BSLH
            &kp LCTRL   &kp A   &kp S   &kp D   &kp F   &kp G                                                               &kp H   &kp J      &kp K    &kp L  &kp SEMI              &kp LALT
             &kp LBKT   &kp Z   &kp X   &kp C   &kp V   &kp B  &lt 5 ESC      &none   &none   &none      &none  &lt 4 RET   &kp N   &kp M  &kp COMMA  &kp DOT  &kp FSLH              &kp RBKT
 &magic LAYER_Magic 0   &none   &none   &none   &none              &mo 3  &kp LSHFT   &none   &none  &kp SPACE      &mo 2           &none      &none    &none     &none  &magic LAYER_Magic 0
            >;
        };

        layer_Symbol {
            bindings = <
     &none     &none     &none     &none     &none                                                                                &none      &none      &none      &none      &none
     &none     &none     &none     &none     &none      &none                                                           &none     &none      &none      &none      &none      &none
    &kp AT    &kp N1    &kp N2    &kp N3    &kp N4     &kp N5                                                          &kp N6    &kp N7     &kp N8     &kp N9     &kp N0   &kp HASH
 &kp TILDE  &kp LPAR  &kp RPAR  &kp LBRC  &kp RBRC  &kp UNDER                                                        &kp DLLR  &sk LGUI   &sk LALT  &sk LCTRL  &sk LSHFT  &kp CARET
 &kp GRAVE    &kp LT    &kp GT  &kp LBKT  &kp RBKT   &kp AMPS   &kp SEMI      &none   &none   &none   &none   &none  &kp PIPE  &kp PLUS  &kp MINUS   &kp STAR   &kp FSLH   &kp BSLH
     &none     &none     &none     &none     &none             &kp PRCNT  &kp COLON   &none   &none   &none   &none               &none      &none      &none      &none      &none
            >;
        };

        layer_Cursor {
            bindings = <
     &none      &none      &none      &none      &none                                                                                           &none         &none          &none          &none           &none
     &none      &none      &none      &none      &none      &none                                                                      &none     &none         &none          &none          &none           &none
   &kp INS  &kp SPC_P  &kp TAB_P    &kp TAB  &kp TAB_N  &kp SPC_N                                                                  &kp PG_UP  &kp HOME        &kp UP        &kp END  &kp LC(SPACE)    &msc SCRL_UP
  &kp SLCK  &sk LSHFT  &sk LCTRL   &sk LALT   &sk LGUI  &kp LG(S)                                                                  &kp PG_DN  &kp LEFT      &kp DOWN      &kp RIGHT        &kp RET  &msc SCRL_DOWN
 &kp PSCRN  &kp LG(Z)  &kp LG(X)  &kp LG(C)  &kp LG(V)  &kp LG(A)   &none   &none   &none   &none         &none      &kp LG(Q)  &kp LA(BSPC)  &kp BSPC  &kp LG(LEFT)  &kp LG(RIGHT)        &kp DEL     &kp LG(TAB)
     &none      &none      &none      &none      &none              &none   &none   &none   &none  &kp LA(LEFT)  &kp LA(RIGHT)                   &none         &none          &none          &none           &none
            >;
        };

        layer_Mouse {
            bindings = <
  &none   &none           &none           &none            &none                                                                                   &none     &none      &none      &none   &none
  &none   &none           &none           &none            &none           &none                                                         &none     &none     &none      &none      &none   &none
  &none   &none  &msc SCRL_LEFT    &mmv MOVE_UP  &msc SCRL_RIGHT    &msc SCRL_UP                                                         &none     &none     &none      &none      &none   &none
  &none   &none  &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_RIGHT  &msc SCRL_DOWN                                                         &none  &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT   &none
  &none   &none           &none           &none            &none           &none  &mkp MCLK      &none   &none   &none   &none   &none   &none     &none     &none      &none      &none   &none
  &none   &none           &none           &none            &none                  &mkp LCLK  &mkp RCLK   &none   &none   &none   &none             &none     &none      &none      &none   &none
            >;
        };

        layer_Function {
            bindings = <
  &none      &none      &none     &none     &none                                                                                 &none   &none   &none    &none    &none
  &none      &none      &none     &none     &none   &none                                                                 &none   &none   &none   &none    &none    &none
  &none      &none      &none     &none     &none   &none                                                          &kp C_VOL_UP  &kp F7  &kp F8  &kp F9  &kp F12  &kp F15
  &none  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI   &none                                                          &kp C_VOL_DN  &kp F4  &kp F5  &kp F6  &kp F11  &kp F14
  &none      &none      &none     &none     &none   &none   &none   &none   &none   &none       &none    &kp C_PP    &kp C_MUTE  &kp F1  &kp F2  &kp F3  &kp F10  &kp F13
  &none      &none      &none     &none     &none           &none   &none   &none   &none  &kp C_PREV  &kp C_NEXT                 &none   &none   &none    &none    &none
            >;
        };

        layer_System {
            bindings = <
          &none            &none            &none            &none            &none                                                                               &none       &none       &none         &none        &none
          &none            &none            &none            &none            &none            &none                                                   &none      &none       &none       &none         &none        &none
 &bt BT_CLR_ALL            &none  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI            &none            &none                                                   &none  &kp _LOCK  &kp _POWER  &kp _SLEEP         &none   &bt BT_CLR
    &bootloader  &rgb_ug RGB_EFR  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF  &rgb_ug RGB_TOG                                                   &none      &bt_0       &bt_1       &bt_2         &bt_3  &bootloader
     &sys_reset  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI            &none   &none   &none   &none   &none   &none   &none   &none     &tog 1      &tog 8       &none  &out OUT_TOG   &sys_reset
          &none            &none            &none            &none            &none                    &none   &none   &none   &none   &none   &none              &none       &none       &none         &none        &none
            >;
        };

        layer_Magic {
            bindings = <
          &none            &none            &none            &none            &none                                                                            &none   &none   &none         &none        &none
          &none            &none            &none            &none            &none            &none                                                   &none   &none   &none   &none         &none        &none
 &bt BT_CLR_ALL            &none  &rgb_ug RGB_HUD  &rgb_ug RGB_HUI            &none            &none                                                   &none   &none   &none   &none         &none   &bt BT_CLR
    &bootloader  &rgb_ug RGB_EFR  &rgb_ug RGB_BRD  &rgb_ug RGB_BRI  &rgb_ug RGB_EFF  &rgb_ug RGB_TOG                                                   &none   &bt_0   &bt_1   &bt_2         &bt_3  &bootloader
     &sys_reset  &rgb_ug RGB_SPD  &rgb_ug RGB_SAD  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI            &none   &none   &none   &none   &none   &none   &none   &none  &tog 1  &tog 8   &none  &out OUT_TOG   &sys_reset
          &none            &none            &none            &none            &none                    &none   &none   &none   &none   &none   &none           &none   &none   &none         &none        &none
            >;
        };

        layer_Gaming {
            bindings = <
                &none      &none   &none   &none   &none                                                                           &none   &none      &none    &none                 &none
                &none      &none   &none   &none   &none   &none                                                           &none   &none   &none      &none    &none                 &none
                &kp Z      &kp V   &kp W   &kp E   &kp R   &kp T                                                           &kp B   &kp N   &kp M  &kp COMMA  &kp DOT              &kp FSLH
                &kp X  &kp LCTRL   &kp Q   &kp W   &kp E   &kp R                                                           &kp T   &kp Y   &kp U      &kp I    &kp O                 &kp P
                &kp C   &kp LALT   &kp A   &kp S   &kp D   &kp F   &tog 8      &none   &none   &none      &none  &kp RET   &kp G   &kp H   &kp J      &kp K    &kp L              &kp SEMI
 &magic LAYER_Magic 0      &none   &none   &none   &none          &kp ESC  &kp LSHFT   &none   &none  &kp SPACE  &kp TAB           &none   &none      &none    &none  &magic LAYER_Magic 0
            >;
        };

    };
};
